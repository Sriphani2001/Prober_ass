#!/usr/bin/python3
import easysnmp
from easysnmp import Session
import sys
import time
import math

# Parse command-line arguments
agent_details = sys.argv[1].split(':')
agent_ip = agent_details[0]
agent_port = int(agent_details[1])
agent_community = agent_details[2]
sample_frequency = float(sys.argv[2])
num_samples = int(sys.argv[3])
sampling_interval = 1 / sample_frequency
oids = sys.argv[4:]

# Add sysUpTime OID to the list
oids.insert(0, '1.3.6.1.2.1.1.3.0')

# Initialize SNMP session
session = Session(hostname=agent_ip, remote_port=agent_port,
                  community=agent_community, version=2, timeout=1, retries=3)

# Initialize variables
previous_values = []
new_sysuptime = 0

def fetch_snmp_data():
    global previous_values, new_sysuptime
    try:
        results = session.get(oids)
    except Exception as e:
        print(f"SNMP request failed: {e}")
        return None, None

    current_sysuptime = int(results[0].value) / 100
    current_values = []

    for result in results[1:]:
        if result.value != 'NOSUCHOBJECT' and result.value != 'NOSUCHINSTANCE':
            if result.snmp_type in ['COUNTER64', 'GAUGE', 'COUNTER', 'COUNTER32']:
                current_values.append(int(result.value))
            else:
                current_values.append(result.value)
        else:
            current_values.append(0)

    return current_sysuptime, current_values

def calculate_rate(prev_values, curr_values, time_diff, snmp_types):
    rates = []
    for i in range(len(curr_values)):
        oid_difference = curr_values[i] - prev_values[i]
        rate = oid_difference / time_diff

        # Handle counter wraparound
        if rate < 0:
            if snmp_types[i] in ['COUNTER32']:
                oid_difference += (2 ** 32)
            elif snmp_types[i] in ['COUNTER64']:
                oid_difference += (2 ** 64)
            rate = oid_difference / time_diff

        rates.append(round(rate))

    return rates

# Fetch initial values
initial_sysuptime, initial_values = fetch_snmp_data()
if initial_values is None:
    sys.exit("Failed to fetch initial SNMP data")

previous_values = initial_values
new_sysuptime = initial_sysuptime
snmp_types = [result.snmp_type for result in session.get(oids)[1:]]

# Main loop
count = 0
while count != num_samples:
    start_time = time.time()
    current_sysuptime, current_values = fetch_snmp_data()

    if current_values is None:
        continue

    # Check for agent reset
    if current_sysuptime < new_sysuptime:
        print("Agent has RESET")
        previous_values = current_values
        new_sysuptime = current_sysuptime
        continue

    # Calculate rates
    time_difference = current_sysuptime - new_sysuptime
    rates = calculate_rate(previous_values, current_values, time_difference, snmp_types)

    # Print the results
    print(f"{int(time.time())} | {' | '.join(map(str, rates))}")

    # Update previous values and sysUpTime
    previous_values = current_values
    new_sysuptime = current_sysuptime

    # Sleep to maintain the sample frequency
    elapsed_time = time.time() - start_time
    sleep_time = max(0, sampling_interval - elapsed_time)
    time.sleep(sleep_time)

    count += 1
